#Time Complexity : O(n^2)
#Space Complexity : O(n) 
#Did this code successfully run on Leetcode : Yes

class Solution:
    def dfs(self, node, graph, color):
        if self.colors[node] != -1:
            return

        self.colors[node] = color

        for i in range(self.n):
            if graph[node][i] == 1:
                self.dfs(i, graph, color)

    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        self.n = len(graph)
        self.colors = [-1 for _ in range(self.n)]
        color = 0
        for i in range(self.n):
            self.dfs(i, graph, color)
            color += 1

        groups = [0 for _ in range(color)]
        for c in self.colors:
            groups[c] += 1

        infected = [0 for _ in range(color)]
        for node in initial:
            infected[self.colors[node]] += 1

        result = float("inf")
        for node in initial:
            count = infected[self.colors[node]]
            if count == 1:
                if result == float("inf"):
                    result = node
                elif groups[self.colors[node]] > groups[self.colors[result]]:
                    result = node
                elif groups[self.colors[node]] == groups[self.colors[result]] and node < result:
                    result = node

        if result == float("inf"):
            result = min(initial)

        return result
